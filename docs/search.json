[
  {
    "objectID": "live-coding-demo.html",
    "href": "live-coding-demo.html",
    "title": "Location Extraction from News Articles, using R and Python",
    "section": "",
    "text": "Welcome to this live coding demonstration exploring LLMs for Toponym Disambiguation in UK local media. We will be using LMUK-Geo, a benchmark dataset we annotated for the purpose of testing geoparsing methods on British local news articles. We’ll do the following:\n\ntoponym recognition using spaCy in Python, to extract locations\ncandidate retrieval, to find real world candidates, using OpenStreetMap Nominatim API\ntoponym resolution with Ollama and gemma2-9b model, to disambiguate\n\nAs such, you’ll get an overview of the full geoparsing pipeline, and get a sense of popular frameworks and common challenges.\n\n\nLet’s start by loading our libraries:\n\n\nCode\n# Load R libraries\nsuppressPackageStartupMessages({\n  library(tidyverse)\n  library(reticulate)  # For Python integration\n  library(httr2)       # For API calls\n  library(jsonlite)    # For JSON handling\n  library(glue)        # For string templating\n  library(DT)          # For interactive tables\n  library(maps)\n})\n\n# use_virtualenv(\".venv/\")\nuse_virtualenv('.venv-mac/')\n# py_install(\"pandas\")\n# py_install('spacy[transformers]')\n# system(\"python -m spacy download en_core_web_sm\")\n\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport ast\nfrom tqdm import tqdm\nimport warnings\nwarnings.filterwarnings(\"ignore\")",
    "crumbs": [
      "Location Extraction from News Articles, using R and Python"
    ]
  },
  {
    "objectID": "live-coding-demo.html#introduction",
    "href": "live-coding-demo.html#introduction",
    "title": "Location Extraction from News Articles, using R and Python",
    "section": "",
    "text": "Welcome to this live coding demonstration exploring LLMs for Toponym Disambiguation in UK local media. We will be using LMUK-Geo, a benchmark dataset we annotated for the purpose of testing geoparsing methods on British local news articles. We’ll do the following:\n\ntoponym recognition using spaCy in Python, to extract locations\ncandidate retrieval, to find real world candidates, using OpenStreetMap Nominatim API\ntoponym resolution with Ollama and gemma2-9b model, to disambiguate\n\nAs such, you’ll get an overview of the full geoparsing pipeline, and get a sense of popular frameworks and common challenges.\n\n\nLet’s start by loading our libraries:\n\n\nCode\n# Load R libraries\nsuppressPackageStartupMessages({\n  library(tidyverse)\n  library(reticulate)  # For Python integration\n  library(httr2)       # For API calls\n  library(jsonlite)    # For JSON handling\n  library(glue)        # For string templating\n  library(DT)          # For interactive tables\n  library(maps)\n})\n\n# use_virtualenv(\".venv/\")\nuse_virtualenv('.venv-mac/')\n# py_install(\"pandas\")\n# py_install('spacy[transformers]')\n# system(\"python -m spacy download en_core_web_sm\")\n\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport ast\nfrom tqdm import tqdm\nimport warnings\nwarnings.filterwarnings(\"ignore\")",
    "crumbs": [
      "Location Extraction from News Articles, using R and Python"
    ]
  },
  {
    "objectID": "live-coding-demo.html#dataset",
    "href": "live-coding-demo.html#dataset",
    "title": "Location Extraction from News Articles, using R and Python",
    "section": "Dataset",
    "text": "Dataset\nLet’s examine our benchmark dataset:\n\n\n\nCode\ngold_data = read_csv('data/LMUK-Geo.csv')\ngold_data |&gt; glimpse()\n# gold_data |&gt; select(doc) |&gt; n_distinct()\n# gold_data |&gt; select(domain) |&gt; n_distinct()\n\nggplot() + \n  geom_polygon(data = map_data('world'), \n  aes(x = long, y = lat, group = group), \n  fill = 'gray90', \n  color = 'black') + \n  coord_fixed(xlim = c(-10,3), \n              ylim = c(50.3, 59))+\n  geom_point(data = gold_data, \n  aes(x = Longitude, y = Latitude, color = domain), \n  size = 2.5, alpha = 0.2) +\n  theme_minimal()+\n  theme(legend.position = \"none\")",
    "crumbs": [
      "Location Extraction from News Articles, using R and Python"
    ]
  },
  {
    "objectID": "live-coding-demo.html#toponym-recognition-using-spacy",
    "href": "live-coding-demo.html#toponym-recognition-using-spacy",
    "title": "Location Extraction from News Articles, using R and Python",
    "section": "Toponym Recognition using spaCy",
    "text": "Toponym Recognition using spaCy\nRemember toponym recognition? The idea that, given some text, we extract the locations inside of it. Toponym recognition is a subset of Named Entity Recognition (NER), and, like NER, it’s done in 3 ways: rules, learning, or hybrid. Rules consists of matching some patterns in the text. For example, anything matching the pattern ‘City of’ and the next word, or a word followed by ‘Street’, or ‘Boulevard’.\n\n\nCode\n# Sample text with locations\ntext &lt;- \"I traveled from the City of Boston to New York, walking down Main Street and Broadway Boulevard. Then I visited Paris, France and returned to Los Angeles County.\"\n\n# Define simple patterns for location recognition\npatterns &lt;- c(\n  \"City of \\\\w+\",           # City of [name]\n  \"\\\\w+ Street\",            # [name] Street  \n  \"\\\\w+ Boulevard\",         # [name] Boulevard\n  \"\\\\w+ County\",            # [name] County\n  \"\\\\w+, \\\\w+\"             # [City], [State/Country]\n)\n\n# Extract locations using pattern matching\nlocations &lt;- c()\nfor(pattern in patterns) {\n  matches &lt;- regmatches(text, gregexpr(pattern, text, perl = TRUE))[[1]]\n  locations &lt;- c(locations, matches)\n}\n\n# Remove duplicates and display results\nunique_locations &lt;- unique(locations)\nprint(unique_locations)\n\n\nThe issue with rules is that to capture all instances you need a lot of them. The more rules you have the more false positives you will also have. Luckily, learning-based systems do a pretty good job nowadays. Sometimes researchers find it helpful to mix rules and learning-based methods, and thus this category is called hybrid. Learning-based NER trains machine learning models on large annotated datasets where humans have labeled entities like persons, locations, and organizations, allowing the system to automatically recognize similar patterns in new text without hand-crafted rules. spaCy NER is a popular Python library that provides pre-trained neural network models for named entity recognition, offering out-of-the-box entity extraction in multiple languages with high accuracy and the ability to customize models for specific domains.\nThere are multiple models offered by spaCy, and which to choose mostly depends on where on the efficiency/accuracy spectrum you would like to be. In other words, how fast vs how correct. Sometimes, if your machine is not powerful enough, your choice might be driven by model size (guess: smaller = worse). You can check performances of various models by spaCy on their website](https://spacy.io/usage/facts-figures)\n\n\nCode\nimport spacy\nfrom spacy import displacy\n\narticles = pd.read_csv('data/articles.csv')\nlen(articles)\narticles.head()\n\n# measure time\nnlp = spacy.load(\"en_core_web_trf\")  # Load the spaCy transformer model\n\nstart = pd.Timestamp.now()\ndoc = nlp(articles['article'][1])\nend = pd.Timestamp.now()\nprint(\"Time taken:\", end - start)\n\nentities = [(ent.text, ent.label_) for ent in doc.ents if ent.label_ == 'GPE']\nhtml = displacy.render(doc, style=\"ent\")\n\nnlp = spacy.load(\"en_core_web_sm\")  # Load the spaCy small model\n\nstart = pd.Timestamp.now()\ndoc = nlp(articles['article'][1])\nend = pd.Timestamp.now()\nprint(\"Time taken:\", end - start)\n\nentities = [(ent.text, ent.label_) for ent in doc.ents if ent.label_ == 'GPE']\nhtml1 = displacy.render(doc, style=\"ent\")\n\n\nWe can display the results to get an intuitive understanding of what the NER model does.\n\n\nCode\n# Display the HTML from Python\nhtmltools::HTML(py$html)\nhtmltools::HTML(py$html1)\n\n\nLet’s now run these models on all our articles, and benchmark their performance against the gold annotation. The models look for three types of location entities:GPE: Geopolitical entities (countries, cities, states); LOC: Locations (mountains, water bodies, regions); FAC: Facilities (buildings, airports, highways). Each model’s predictions are compred against the human-annotated gold standard using standard information retrieval metrics. We will define:\n\nTrue Positives: Geographic entities correctly identified by the model\n\nFalse Positives: Non-geographic terms incorrectly identified as locations\n\nFalse Negatives: Geographic entities that the model missed\n\n\nand use these to calculate:\nPrecision = TP / (TP + FP)\n&gt; Of all the entities the model identified as locations, what percentage were actually correct?\nHigh precision = low false alarm rate\nRecall = TP / (TP + FN)\n&gt; Of all the actual geographic entities in the text, what percentage did the model successfully find?\nHigh recall = low miss rate\nF1 Score = 2 × (Precision × Recall) / (Precision + Recall)\n&gt; Harmonic mean that balances precision and recall.\n&gt; Useful single metric when you need both high precision AND high recall.\nWe will then produce a comparison table showing precision, recall, and F1 scores for both models, helping determine which performs better for toponym recognition tasks.\n\n\nCode\n# Load human-annotated gold standard data\ngold_df = pd.read_csv('data/gold_toponym_recognition.csv')\n\n# ------------------------------------------------------------\n# STEP 1: Parse the gold standard annotations\n# ------------------------------------------------------------\n# The entities_gold column contains string representations of dicts\n# We need to convert them to actual Python dictionaries\n\ndef safe_literal_eval(x):\n    \"\"\"Safely convert string to dictionary\"\"\"\n    if isinstance(x, dict):\n        return x\n    try:\n        return ast.literal_eval(x)\n    except (ValueError, SyntaxError):\n        return {}\n\ngold_df['entities_gold'] = gold_df['entities_gold'].apply(safe_literal_eval)\n\n# ------------------------------------------------------------\n# STEP 2: Extract entities using both spaCy models\n# ------------------------------------------------------------\nnlp_trf = spacy.load(\"en_core_web_trf\")  # Transformer (accurate but slow)\nnlp_sm = spacy.load(\"en_core_web_sm\")    # Small model (fast but less accurate)\n\n# We care about these location entity types:\n# GPE = Geopolitical entities (countries, cities, states)\n# LOC = Locations (mountains, water bodies, regions)  \n# FAC = Facilities (buildings, airports, highways)\nVALID_LABELS = {\"LOC\", \"GPE\", \"FAC\"}\n\ndef extract_entities(text, nlp_model):\n    \"\"\"Extract location entities from text using spaCy\"\"\"\n    doc = nlp_model(text)\n    return {\n        label: [ent.text.strip() for ent in doc.ents if ent.label_ == label]\n        for label in VALID_LABELS\n    }\n\n# Process all documents with both models\ntrf_results = []\nsm_results = []\n\nfor doc_text in tqdm(gold_df['doc'], desc=\"Processing documents\"):\n    trf_results.append(extract_entities(doc_text, nlp_trf))\n    sm_results.append(extract_entities(doc_text, nlp_sm))\n\n# Add model predictions to dataframes\ngold_df['entities_trf'] = trf_results\ngold_df['entities_sm'] = sm_results\n# gold_df.to_csv('data/gold_with_predictions.csv', index=False)\n# ------------------------------------------------------------\n# STEP 3: Calculate performance metrics\n# ------------------------------------------------------------\n\ndef evaluate_model(gold_entities, predicted_entities):\n    \"\"\"\n    Compare predicted entities against gold standard.\n    Returns precision, recall, and F1 scores.\n    \"\"\"\n    # Flatten all entity types into single lists and lowercase for fair comparison\n    gold_flat = []\n    pred_flat = []\n    \n    for entity_type in VALID_LABELS:\n        gold_flat.extend([e.lower() for e in gold_entities.get(entity_type, [])])\n        pred_flat.extend([e.lower() for e in predicted_entities.get(entity_type, [])])\n    \n    # Convert to sets for comparison\n    gold_set = set(gold_flat)\n    pred_set = set(pred_flat)\n    \n    # Calculate true positives, false positives, false negatives\n    tp = len(gold_set & pred_set)  # Correctly found\n    fp = len(pred_set - gold_set)  # Incorrectly found\n    fn = len(gold_set - pred_set)  # Missed\n    \n    return tp, fp, fn\n\n# Calculate metrics for each document\ntrf_metrics = []\nsm_metrics = []\n\nfor idx, row in gold_df.iterrows():\n    # Transformer model\n    tp, fp, fn = evaluate_model(row['entities_gold'], row['entities_trf'])\n    trf_metrics.append({'TP': tp, 'FP': fp, 'FN': fn})\n    \n    # Small model\n    tp, fp, fn = evaluate_model(row['entities_gold'], row['entities_sm'])\n    sm_metrics.append({'TP': tp, 'FP': fp, 'FN': fn})\n\n# ------------------------------------------------------------\n# STEP 4: Calculate overall performance \n# ------------------------------------------------------------\n\ndef calculate_micro_averaged_scores(metrics_list):\n    \"\"\"Calculate overall precision, recall, and F1 across all documents\"\"\"\n    total_tp = sum(m['TP'] for m in metrics_list)\n    total_fp = sum(m['FP'] for m in metrics_list)\n    total_fn = sum(m['FN'] for m in metrics_list)\n    \n    precision = total_tp / (total_tp + total_fp) if (total_tp + total_fp) &gt; 0 else 0\n    recall = total_tp / (total_tp + total_fn) if (total_tp + total_fn) &gt; 0 else 0\n    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) &gt; 0 else 0\n    \n    return precision, recall, f1\n\n# Get final scores\ntrf_precision, trf_recall, trf_f1 = calculate_micro_averaged_scores(trf_metrics)\nsm_precision, sm_recall, sm_f1 = calculate_micro_averaged_scores(sm_metrics)\n\nresults = pd.DataFrame({\n    \"Model\": [\"en_core_web_trf\", \"en_core_web_sm\"],\n    \"Precision\": [trf_precision, sm_precision],\n    \"Recall\": [trf_recall, sm_recall],\n    \"F1\": [trf_f1, sm_f1]\n})\n\nresults.round(3)\n\n\nAs we can see, the transformer model is highly superior (althought slower) to the small model. Just so you know, these represent the extremes of the spaCy spectrum and there are other models you could try.  Let’s now save the toponyms extracted by our best model, to use in the next sections.\n\n\nCode\nlong_data = []\nfor idx, row in gold_df.iterrows():\n    for entity_type, entities in row['entities_trf'].items():\n        for entity in entities:\n            long_data.append({'doc_id': idx, 'doc': row['doc'], 'entity': entity})\n\npd.DataFrame(long_data).to_csv('data/entities_long.csv', index=False)",
    "crumbs": [
      "Location Extraction from News Articles, using R and Python"
    ]
  },
  {
    "objectID": "live-coding-demo.html#candidate-retrieval",
    "href": "live-coding-demo.html#candidate-retrieval",
    "title": "Location Extraction from News Articles, using R and Python",
    "section": "Candidate Retrieval",
    "text": "Candidate Retrieval\nFor candidate retrieval, we will use OpenStreetMap’s Nominatim, an API service that fetches data from OSM’s geographic knowledge database. We will use the tidygeocoder package in R, which provides a simple and consistent interface for geocoding and reverse geocoding using various services, including OSM Nominatim. It allows you to convert addresses or place names into geographic coordinates (latitude and longitude) and vice versa.\nJust so you know, another useful resource (for UK locations) is Ordnance Survey Open Names, a comprehensive database of place names, roads numbers and postcodes for Great Britain (but no Northern Ireland unfortunately): https://www.ordnancesurvey.co.uk/products/os-open-names. Downloading OS Open Names is very simple. From the platform you just click on your desired format and get the data for free. It’s updated quarterly.\n![](images/clipboard-3609027799.png){width=\"358\"}\n\n\nCode\n# Load data\ngold_df &lt;- read_csv('data/entities_long.csv')\nunique_entities &lt;- gold_df |&gt;\n  select(entity) |&gt;\n  distinct()\n# write_csv(unique_entities, 'data/unique_entities.csv')\n\n# OSM candidates (this will take around 8minutes for 470 entities)\nlibrary(tidygeocoder)\n# unique_entities &lt;- read_csv('data/unique_entities.csv')\nosm_candidates &lt;- unique_entities |&gt; \n  geocode(entity, method = 'osm', lat = latitude , long = longitude, limit = 10, custom_query = list(countrycodes = \"gb\"), return_input = FALSE)\nwrite_csv(osm_candidates, 'data/osm_candidates.csv')\n\n\nBefore we move on to disambiguation let’s calculate which district each coordinate falls into. This will help us later on in the disambiguation process.\n\n\nCode\nosm_candidates &lt;- read_csv('data/osm_candidates.csv')\nlibrary(sf)\n# Load UK districts shapefile\nuk_districts &lt;- st_read(\"lad_boundaries/LAD_MAY_2024_UK_BFE.shp\")\nuk_districts &lt;- st_transform(uk_districts, crs = 4326)  # Ensure it's in WGS84\n\n# Convert OSM candidates to sf object\nosm_sf &lt;- st_as_sf(osm_candidates |&gt; drop_na(), coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n# Perform spatial join to find which district each point falls into\nosm_with_districts &lt;- st_join(osm_sf, uk_districts, join = st_within)\nosm_with_districts_cands &lt;- osm_with_districts |&gt; \n  filter(!is.na(LAD24NM)) |&gt; \n  mutate(\n    longitude = st_coordinates(geometry)[,1],\n    latitude  = st_coordinates(geometry)[,2]\n  )\n\nwrite_csv(osm_with_districts_cands |&gt; st_drop_geometry(), 'data/osm_candidates_with_districts.csv')",
    "crumbs": [
      "Location Extraction from News Articles, using R and Python"
    ]
  },
  {
    "objectID": "live-coding-demo.html#toponym-resolution",
    "href": "live-coding-demo.html#toponym-resolution",
    "title": "Location Extraction from News Articles, using R and Python",
    "section": "Toponym Resolution",
    "text": "Toponym Resolution\n\nOllama\nTo use ollama in R, you can directly communicate with the local server using the httr2 package, or you can use the ellmer, ‘ollamar’ or ‘rollama’ packages which provide a convenient interface. Regardless, your first need install Ollama on your machine.\nIf you choose the ‘httr2’ route, you can refer to the Ollama API documentation for details on how to structure your requests. I also recommend this blog post.\n\n\nCode\n# this is ellmer works\nchat &lt;- ellmer::chat_ollama(\"Be terse\", model = \"gemma3:1b\", echo = \"none\")\nchat$chat(\"who is Super Mario's best friend?\")\n\n# it's longer code, but more robust over time with httr2\nhttr2::request(\"http://localhost:11434\") |&gt; \n  httr2::req_url_path(\"/api/generate\") |&gt;\n  httr2::req_headers(\"Content-Type\" = \"application/json\") |&gt;\n  httr2::req_body_json(\n    list(\n      model = \"gemma3:1b\",\n      prompt = \"Who is Super Mario's best friend?\",\n      stream = FALSE,\n      options = list(seed = 123)  # reproducible seed\n    )\n  ) |&gt; \n  httr2::req_perform() |&gt; httr2::resp_body_json() |&gt;\n    getElement(\"response\")\n\n# a useful wrapper is ollamar, which hides this code behind a function\nollamar::generate(\"gemma3:1b\", \"Who is Super Mario's best friend?\", output = 'text')\n\n\n\n\nExperiment Setup\nLet’s try setup an experiment where we query gemma3-1b to disambiguate a toponym. We will provide it with the context of the article where the toponym was found, and a list of candidates retrieved from the gazetteers. The model will then select the most likely candidate.\n\n\nCode\n# merge back candidates with articles and entities\ngold_data &lt;- read_csv('data/LMUK-Geo.csv')\nosm_with_districts_cands &lt;- read_csv('data/osm_candidates_with_districts.csv')\n\n# now let's select a small sample of 10 articles to work with\nset.seed(42)\nsample_docs &lt;- gold_data |&gt; \n  distinct(doc) |&gt;            # make sure articles are unique\n  slice_sample(n = 10) |&gt; \n  pull(doc)                   # vector of 10 article texts\n\n# Step 2: keep all toponyms + candidates for those articles\nsample &lt;- osm_with_districts_cands |&gt; \n  sf::st_drop_geometry() |&gt;\n  group_by(address) |&gt;\n  summarise(candidates = str_c(unique(LAD24NM), collapse = \"; \"), .groups = \"drop\") |&gt;\n  left_join(gold_data, by = c(\"address\" = \"text\")) |&gt; \n  filter(doc %in% sample_docs)\n  \n# Define temperatures to test\ntemperatures &lt;- as.character(c(0,1))\ndata_expanded &lt;- expand_grid(\n  temperature = temperatures, \n  sample\n) |&gt; \n  mutate(model = 'gemma3:1b')\n\n\n\n\nCode\n# Define experiments: which fields to include\nexperiments &lt;- list(\n  exp1 = c(\"Outlet coverage LAD\", \"Domain\"),\n  exp2 = c(\"Domain\")  # Only Domain\n)\n\n# Define prompt types\nprompt &lt;- \"The task is mapping an entity (a toponym) to the Local Authority District (LAD) in which it is situated. Your goal is to select the correct option from the list provided. Instructions:\n1. Review Entity and Article:\n- Identify the toponym (location name).\n- Read the article carefully to understand the context.\nExample:\nEntity: King's Head pub.\nArticle: Incident outside the King's Head pub on Main Street, Guildford.\nUse surrounding text to infer the location (e.g., Guildford).\n\n2. Check Metadata where provided:\n- Domain: The publisher’s domain may provide geographic context.\n- Outlet coverage LAD: The Local Authority District covered by the outlet which published the article.\n- Other Entities: Other entities present in the same articles and their candidates.\n\n3. Select answer from options:\nChoose the correct answer from the options based on context.\nOptions:\n- A list of applicable Districts, if any.\n- “LAD not in options” (choose if correct District is missing).\n- “Entity is not a location” if applicable.\n- “Entity is outside the UK” for non-UK locations.\n- “Entity spans across several districts (e.g., a region)“ for entities that are not specific to a single LAD (e.g., Wales, Sussex).\n- “Unsure” if uncertain.\n\n4. Generate Response:\n- Format your response as JSON:\n{\n  \\'chosen_option\\': \\'Your choice\\',\n  \\'reasoning\\': \\'Your reasoning\\'\n}\"\n\nclassification_question &lt;- \"Which of the options provided best represents the Local Authority District (LAD) for the entity provided, based on the context in the article? Ensure the response is strictly in JSON format with no additional text, explanations, or commentary outside of the JSON object. Match the JSON schema indicated. Example of output: {\\'chosen_option\\': \\'Fife\\', \\'reasoning\\': \\'The article refers to a toponym situated in Fife.\\'}\"\n\n\n\n\nCode\nlibrary(jsonlite)\ndetach(package:maps, unload=TRUE)\n\nquery_llm &lt;- function(data, system_message, classification_question, included_fields = c(\"Outlet coverage LAD\", \"Domain\")) {\n  # Create prompts for each row\n  prompts &lt;- data_expanded %&gt;%\n    rowwise() |&gt; \n    mutate(\n      test_prompt = glue(\n        \"{prompt}\\n\",\n        \"Entity: {address}\\n\\n\",\n        \"Article: {doc}\\n\\n\",\n        if (\"Outlet coverage LAD\" %in% included_fields) {\n          \"Outlet coverage LAD: {domain_lad}\\n\"\n        } else {\n          \"\"\n        },\n        if (\"Domain\" %in% included_fields) {\n          \"Domain: {domain}\\n\"\n        } else {\n          \"\"\n        },\n        \"Options: {candidates}\\n\",  # Fix: use candidates instead of options_str\n        \"{classification_question}\"\n      )\n    ) %&gt;%\n    pull(test_prompt)\n  \n  # Create requests\n  reqs &lt;- map2(prompts, data_expanded$temperature, function(prompt, temp) {  \n    httr2::request(\"http://localhost:11434\") %&gt;%\n      httr2::req_url_path(\"/api/generate\") %&gt;%\n      httr2::req_headers(\"Content-Type\" = \"application/json\") %&gt;%\n      httr2::req_body_json(list(\n        model = \"gemma3:1b\", \n        prompt = prompt,\n        stream = FALSE,\n        format = \"json\",\n        keep_alive = \"10s\",\n        options = list(seed = 42, temperature = as.numeric(temp))  # Use temp parameter\n      ))\n  })\n  \n  # Make parallel requests\n  resps &lt;- httr2::req_perform_parallel(reqs, on_error = \"continue\", progress = TRUE)\n  \n  # Process results\n  results &lt;- purrr::map(resps, function(resp) {  # Use purrr::map explicitly\n    # Step 1: parse outer JSON\n    outer &lt;- httr2::resp_body_json(resp)\n    # Step 2: parse inner 'response' JSON safely\n    parsed_inner &lt;- tryCatch({\n      fromJSON(outer$response)\n    }, error = function(e) NULL)\n    tibble(\n      chosen_option = if (!is.null(parsed_inner)) parsed_inner$chosen_option else NA,\n      reasoning     = if (!is.null(parsed_inner)) parsed_inner$reasoning else NA\n    )\n  })\n  \n  # Combine into a single data frame\n  results_df &lt;- bind_rows(results)\n  \n  # Bind with original data to preserve address, doc, and other fields\n  final_result &lt;- bind_cols(\n    data %&gt;% select(address, doc, everything()),  # Keep all original columns\n    results_df\n  )\n  \n  return(final_result)  # Don't forget to return the result!\n}\n\n# Simple iteration through experiments\nfor (exp_name in names(experiments)) {\n  included_fields &lt;- experiments[[exp_name]]\n  \n  # Run the query\n  result &lt;- query_llm(\n    data = data_expanded,\n    system_message = prompt,\n    classification_question = classification_question,\n    included_fields = included_fields\n  )\n  write_csv(result, paste0(\"results_\", exp_name, \".csv\")) # Save results\n}\n\nresults &lt;- list(\n  exp1 = read_csv(\"results_exp1.csv\"),\n  exp2 = read_csv(\"results_exp2.csv\")\n) |&gt; bind_rows(.id = \"experiment\") \n\n\n\n\nResults\nLet’s now evaluate this. As we saw in the slides, you can evaluate spatially or textually. Spatial evaluation consists of measuring the distance between the predicted and the actual location. Textual evaluation consists of checking if the predicted location matches the actual location.\n\n\nCode\n# Data preprocessing and evaluation\nevaluation &lt;- results |&gt; \n  mutate(\n    chosen_option = if_else(chosen_option == 'Bristol', 'Bristol, City of', chosen_option),\n    result = case_when(\n      local_authority_district == chosen_option ~ \"Correct\",\n      local_authority_district != chosen_option ~ \"Incorrect\"\n    )\n  )\n\n# Create a lookup table for experiment descriptions\nexp_descriptions &lt;- tibble(\n  experiment = names(experiments),\n  description = map_chr(experiments, ~paste(.x, collapse = \", \"))\n)\n\n# Classification accuracy table\nclassification_results &lt;- evaluation |&gt; \n  group_by(experiment, temperature) |&gt;\n  summarise(\n    total = n(),\n    correct = sum(result == \"Correct\", na.rm = TRUE),\n    accuracy = round(correct / total, 3),\n    .groups = \"drop\"\n  ) |&gt; \n  left_join(exp_descriptions, by = \"experiment\") |&gt; \n  relocate(description, .after = experiment) |&gt; \n  select(-experiment)\n\n# Display results\nprint(classification_results)\n\n\n\n\nCode\n# Spatial evaluation with distance calculations\nspatial_results &lt;- evaluation |&gt;\n  left_join(\n    osm_with_districts_cands |&gt; select(address, LAD24NM, latitude, longitude),\n    by = c('address', 'chosen_option' = 'LAD24NM')\n  ) |&gt; \n  distinct(address, chosen_option, start, end, temperature, experiment, .keep_all = TRUE) |&gt;\n  rename(true_long = Longitude, true_lat = Latitude, pred_long = longitude, pred_lat = latitude) |&gt;\n  rowwise() |&gt;\n  mutate(\n    distance = if_else(\n      is.na(pred_long) | is.na(pred_lat), \n      20039,  # Max distance for missing coordinates\n      geosphere::distHaversine(c(true_long, true_lat), c(pred_long, pred_lat)) / 1000\n    )\n  ) |&gt;\n  ungroup()\n\n# Spatial metrics table\nspatial_metrics &lt;- spatial_results |&gt;\n  group_by(experiment, temperature) |&gt;\n  summarise(\n    within_20km = round(mean(distance &lt;= 20, na.rm = TRUE), 3),\n    within_161km = round(mean(distance &lt;= 161, na.rm = TRUE), 3),\n    mean_distance = round(mean(distance, na.rm = TRUE), 1),\n    .groups = \"drop\"\n  )\n\n# Join with your spatial metrics\nspatial_metrics_labeled &lt;- spatial_metrics |&gt;\n  left_join(exp_descriptions, by = \"experiment\") |&gt; \n  relocate(description, .after = experiment) |&gt; \n  select(-experiment)\n\nprint(spatial_metrics_labeled)\n\n\nOur experiments yielded mixed results across different experimental configurations. The classification accuracy varied significantly depending on the included contextual fields and temperature settings.\n\nWhere to go from here?\nThese mixed results indicate substantial room for improvement through several approaches:\nModel Selection: A more sophisticated language model with better geographic knowledge and reasoning capabilities could significantly improve disambiguation accuracy.\nPrompt Engineering: More carefully crafted prompts that explicitly highlight geographic indicators and disambiguation strategies could enhance performance.\nEnhanced Context: Including or removing contextual information such as regional newspapers, local landmarks, or administrative hierarchies might improve results.\nThank you Any questions or comments regarding this notebook, please let me know. Contact: s.bisiani@surrey.ac.uk\nCode: Available on Github",
    "crumbs": [
      "Location Extraction from News Articles, using R and Python"
    ]
  }
]